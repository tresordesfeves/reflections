When would you want to use a remote repository rather than keeping all your work
local?
how to establish the link between my local repos and my remote GITHUB:
> git remote add origin https://github.com/tresordesfeves/reflections.git
then to verify that origin (the "local transfer chamber" has been created:
> git remote (result will be "origin")
> git remote -v (-v like in verbose) will show you the path between origin and the remote GITHUB repo.
then to push the branch (here the branch to push is "master")
>git push origin master ( you have to mention which branch you want to push : here for example "master")
same concept to pull from the remote into the local
>git pull origin master 

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?
- branch is done internaly on one repo ( either local or remoted)
- fork is a "cloning" done on Github ( from one user to an other)
- clone is from GitHub to local ( or local to local)

To clone you have to cd into the the directory where you want the new repo ( a clone of the original repo) to be created: the new directory (repo) will be created automatically . (here for example we cd into version-control, then we cloned recipe from our remote on Github into our local :(copy the URL in the GitHub repo ("clone or Download" green button))
    >git clone https://github.com/tresordesfeves/recipes.git
 automaticaly a sub directory (recipes) was created in version-control. and you got cd into this new directory.

When you clone a repo from Github into your local repos, the remote is automaticaly created (and can be used for future push or pull) (you can check it out by using  > git remote - v   to see the link between origin and remote). 

How to see the difference beween local and remote?
>git status
        On branch master
        Your branch is ahead of 'origin/master' by 1 commit.
        (use "git push" to publish your local commits)
        nothing to commit, working tree clean
then to update the remote use :
>git push origin master 

To authorize collaborator to push to your remote directory/repo: go onto the remote? setting/add collabotators
    
What is the benefit of having a copy of the last known state of the remote
stored locally?
a local copy of the remote bramch is labeled origin/master
Local copy of he remote branch, local branch and remote branch are identical right after a pull or a push.
On the contrary a >git fetch origin    will only update the locql copy of the remote branch, NOT THE LOCAL BRANCH ITSELF!!!
>git fetch origin  FOLOWED BY
>git merge master origin/master IS THE SAME THEN
>git pull origin master

>git log origin/master will list all the comits of the local copy of the remote when it was laste updated (meaning after the ast, push or pull or fetch)


    Fill in your answer here

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Fill in your answer here

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

on GitHub : a pull request to  ask collaborators to merge a secondary branch into master (WARNING: the pull rquest button offers you by default to pull into the original repo the master branch was forked from ; make sure you select your repo and not the original one from an other author ).
pushing a branch from local to the same remoted branch on GitHub AUTOMATICALY UPDATE THE PULL REQUEST(S) attached to this branch.
WORK FLOW:
- when working locally and willing to share a change with yur team for approval:
  1) create a new branch (different-oil)
  2) checkout the new branch
  3) do the modifs to be approved on this new branch
  4) add 
  5) commit
  6) push this new branch : push origin different-oil (assuming that the remote link to the repo as been created previously (usualy by a clone from GitHub to my local))
  7) on GitHub : checkout the new branch (different oil)
  8) use the pull request button
  9) the team will be messaged of my pool request qnd will comment on it
  10) if the team approves then i can just validate the "merge" (pull request)
  11)if my modif needs more work: go back in the new branch (different-oil)
  12) adress the changes 
  13) push the branch on GitHub (it will update the pull request automaticaly
  14) validate the pull request on Gh
  150 merge my new branch ito master to update master localy
  13) merge my changes into master 


Workflow summary from Udacity:
        "You just saw that the workflow when making changes in a separate branch is more complicated than working directly in master, especially when you need to stay up-to-date with changes others are making. Rather than simply pulling and pushing, you need to pull changes into your local master branch, merge the local master into your branch (different-oil, in our case), then push your branch to the remote before finally merging your branch into master, either locally or on GitHub "

But since we are collaborating, THE MASTER ON GITHUB ON THE ORIGINAL BRANCH THAT WE FORKED MIGHT HAVE BEEN MODIFIED AFTER YOU CREATED THE PULL REQUEST.
As you are working locally,  you need to create a remote for the original master on your local: just clone the original  master from Github onto your local master . by convention the remote is named upstream: 
>> git remote add upstram https://github.com/coolaborativegithubproject/ORIGINALBRANCH
and the a pull. You will then work to meger your the upstram/master on your local copy of YOUR GITHUB head branch you are traying to merge into the original branch .
Once you have resole the conflict localy, then you can push your loal on YOUR Git Hub. the pull equest will be updated. And the merge will happen.
UPSTREAM








